buildscript {
	repositories {
		mavenCentral()
		gradlePluginPortal() // this line has to be after mavenCentral() or ForgeGradle breaks apart
		maven {
			name = "forge"
			url = "https://maven.minecraftforge.net/"
		}
		maven {
			url = "https://jitpack.io"
		}
	}
	dependencies {
		classpath 'com.github.GTNewHorizons:ForgeGradle:1.2.11'
		classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.2'
	}
}

repositories {
	maven {
		name = "gt"
		url = "https://gregtech.mechaenetia.com/"
	}
	maven {
		name = "GTNH Maven"
		url = "https://nexus.gtnewhorizons.com/repository/public/"
	}
	maven {
		url 'https://jitpack.io'
	}
}

apply plugin: 'forge'

apply plugin: "com.github.johnrengelman.shadow"
// Bump this every new code update after a version release, even if not releasing yet, that
// way SNAPSHOT's work properly as something like `2.1.2-SNAPSHOT` orders before `2.1.2 in
// SEMVER that gradle uses.
group = "ganymedes01.etfuturum"
archivesBaseName = "Et_Futurum_Requiem"
def modVersion = "2.6.0"
version = project.hasProperty("useCommitHashInVersion") ? getCommitVersion(modVersion) : modVersion

def buildAll = project.hasProperty("all")

def getCommitVersion(modVersion){
	try {
		def commitHashProc = "git rev-parse --short HEAD".execute()
		commitHashProc.waitFor()
		if(commitHashProc.exitValue() == 0){
			def commitHash = commitHashProc.text.trim()
			
			def commitTagProc = "git tag --points-at HEAD".execute()
			commitTagProc.waitFor()
			if(commitTagProc.exitValue() == 0){
				def commitTag = commitTagProc.text.trim()
				if(commitTag){
					return modVersion // if the commit is tagged, assume it's a release
				} else {
					return modVersion + "-SNAPSHOT-" + commitHash
				}
			} else {
				println commitTagProc.err.text
				throw new Exception("git tag exited with non-zero return value")
			}
		} else {
			println commitHashProc.err.text
			throw new Exception("git rev-parse exited with non-zero return value")
		}
	} catch(Exception e){
		println "Failed to get commit version: " + e.getMessage()
	}
	return modVersion // fallback
}

// Run `./gradlew clean` when the metadata changes, otherwise the in-game meta (ForgeGradle's substitution) will remain stale.

def authorList = ["\u00A79ganymedes01", "\u00A7bRoadhog360", "\u00A7aembeddedt", "\u00A7ajss2a98aj", "\u00A7amakamys", "\u00A7aKryptonCaptain"]
def meta = [
	name: "Et Futurum Requiem", // hardcoded in Reference.java
	version: modVersion,
	commitVersion: version,
	mcversion: "1.7.10",
	credits: "\u00A7bDelirusCrux, AstroTibs",
	authorList: authorList.join('", "'),
	url: "\u00A77https://www.curseforge.com/minecraft/mc-mods/et-futurum-requiem",
	description: "\u00A79Brings the future to now, for real this time.",
	logoFile: "assets/etfuturum/logo.png"
]

sourceCompatibility = 1.8
targetCompatibility = 1.8
compileJava.options.bootClasspath = org.gradle.internal.jvm.Jvm.current().getJre().getHomeDir().toString() +"/lib/rt.jar"
compileJava {
	options.encoding = "UTF-8"
}

configurations {
	// By default only compileClasspath extends shadow, make runtime extend it too
	compile.extendsFrom(shadow)
}

dependencies {
	// Can use `compileOnly` instead of `compile` if you want to require it at build time,
	// but not require it in `runClient`/`runServer`
	compileOnly "thaumcraft:Thaumcraft:1.7.10-4.2.3.5:dev"
	compileOnly "mcp.mobius.waila:Waila:1.5.11-RC2-NONEI_1.7.10:dev"
	/** every file in libs/ gets forcibly compiled, please use another dir
	compile files('libs/BaublesExpanded-2.1.2-dev.jar')
	compile files('libs/CraftTweaker-1.7.10-3.1.0-legacy.jar')*/
	compileOnly "team.chisel:Chisel:2.9.5.12:deobf"
	compileOnly "team.chisel.ctmlib:CTMLib:MC1.7.10-1.4.1.5:deobf"
	compileOnly "codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev"
	compileOnly "codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev"
	compileOnly "codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev"
	compileOnly("com.github.GTNewHorizons:Angelica:1.0.0-alpha19:api") {
		transitive = false
	}
	
	compileOnly("com.github.GTNewHorizons:lwjgl3ify:1.5.14:api") {
		transitive = false
	}
	
	shadow('com.github.makamys:MCLib:0.3.7.5') {
		exclude group: "codechicken"
	}
}

minecraft {
	version = "1.7.10-10.13.4.1614-1.7.10"
	runDir = "eclipse/assets"
	replaceIn 'ganymedes01/etfuturum/lib/Reference.java'
	meta.each { k, v -> replace "@${k.toUpperCase()}@", v }
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.properties meta
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'
		expand meta.collectEntries { k, v -> [k, v.replaceAll("\u00A7.", "")] } // strip formatting
	 }

	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

jar {
	// we disable the original jar task, and make shadowJar do the work instead
	enabled = false
	dependsOn shadowJar
}

// shadowJar is the new jar
shadowJar {
	classifier = '' // use the same file name as the jar task
	configurations = [project.configurations.shadow]
	relocate 'makamys.mclib', 'ganymedes01.etfuturum.repackage.makamys.mclib'
	exclude '**/LICENSE.txt'
	
	manifest {
		attributes(
			'FMLAT': "etfuturum_at.cfg",
		)
	}
}

task devJar(type: Jar) {
	dependsOn shadowJar
	
	classifier = 'dev'
	// copy the contents of the main jar
	from zipTree(tasks.shadowJar.archivePath)
	
	manifest = tasks.shadowJar.manifest
}

if(buildAll) {
	// we create dev jars by copying the output jars before they get obfuscated
	reobf.dependsOn devJar

	artifacts {
		archives devJar
	}
}


if (!hasProperty("mavenUsername")) {
	ext.mavenUsername="${System.getenv().MAVEN_USERNAME}"
}

if (!hasProperty("mavenPassword")) {
	ext.mavenPassword="${System.getenv().MAVEN_PASSWORD}"
}

if (!hasProperty("mavenURL")) {
	ext.mavenURL="${System.getenv().MAVEN_URL}"
}


uploadArchives {
	repositories {
		mavenDeployer {
			uniqueVersion = false
			repository(url: mavenURL) {
				authentication(userName: mavenUsername, password: mavenPassword)
			}
		}
	}
}

//##########################################################################################################
//########################################    Mixin  Part   ################################################
//##########################################################################################################
//Add
//--tweakClass org.spongepowered.asm.launch.MixinTweaker --mixin mixins.etfuturum.json
//to your client and server program arguments if working in a dev environment.

// -- Begin UniMixins section --

// -- Add UniMixins dependency --

repositories {
	maven {
		url 'https://jitpack.io'
	}
}

def unimixinsVersion = "0.1.14"

dependencies {
	compile("com.github.LegacyModdingMC.UniMixins:unimixins-all-1.7.10:$unimixinsVersion:dev")
}

// Exclude conflicting transitive dependencies.
// Only needed if you depend on a mod that depends on one of these.
// This may need to be at the end of the build script.

configurations.compile.dependencies.each {
	if (it instanceof ExternalModuleDependency) {
		it.exclude module: "SpongeMixins"
		it.exclude module: "SpongePoweredMixin"
		it.exclude module: "00gasstation-mc1.7.10"
		it.exclude module: "gtnhmixins"
	}
}

// -- Generic Mixin setup --

runClient {
	args("--tweakClass", "org.spongepowered.asm.launch.MixinTweaker")
}

runServer {
	args("--tweakClass", "org.spongepowered.asm.launch.MixinTweaker")
}

def modid = "etfuturum"
def outSrgFile = "${tasks.compileJava.temporaryDir}/outSrg.srg"
def outRefMapFile = "${tasks.compileJava.temporaryDir}/mixins.${modid}.refmap.json"

shadowJar {
	from outRefMapFile
	manifest {
		attributes.put("FMLCorePlugin", "ganymedes01.etfuturum.EtFuturumCorePlugin")
		attributes.put("FMLCorePluginContainsFMLMod", true)
		attributes.put("ForceLoadAsMod", true)
		attributes.put("MixinConfigs", "mixins.${modid}.json")
	}
}

tasks.compileJava.options.compilerArgs += ["-AreobfSrgFile=${tasks.reobf.srg}", "-AoutSrgFile=${outSrgFile}", "-AoutRefMapFile=${outRefMapFile}"];

reobf {
	addExtraSrgFile outSrgFile
}
